[{"title":"我的MarkDown语法笔记","date":"2017-04-19T15:24:50.000Z","path":"2017/04/19/my-markdown-note/","text":"我的MarkDown语法笔记这是我自己风格的语法笔记，用来展示如何使用MarkDown语法。MarkDown是兼容HTML的并且是为了转成HTML格式的。所以只能表示出HTML标签能够呈现出的效果。使用蚂蚁笔记的好处是它支持左边MarkDown右边HTML的效果。（注：蚂蚁笔记cannot show the preview of and _ in English words correctly, like*this） 首先是标题可以在文字下面使用任意数量的===或者—，分别表示一阶标题和二阶标题我是一阶标题（=）= 我是二阶标题（-）也可以直接在文字前加n个#后面加空格表示n阶标题 一姐二姐三姐四姐五姐六姐（最多只有六阶标题，而且和五阶差不多大）####### 小妹（小妹前面是7个#，多了一个显示出来了） 如果想要高大上的区块效果在文字前加&gt;（不要忘了空格）区块效果会一直延续下去，直到第一个空行或者下一个非空行仍是以&gt;开头也就是说区块中的文字就算不打&gt;也会在区块中另外还要注意分割线和区块内段落，都需要空行才是想要的效果 并且可以在区块中进行嵌套，只要行首有两个&gt;&gt;就可以 还可以继续嵌 无穷无尽。。。但跳出某一个嵌套区块需要一个空行 区块中可以正常使用其他MarkDown语法 标题 段落 区块中的代码不适宜直接空四格或者Tab，要使用反引号`String daima = &quot;代码&quot;; MarkDown支持有序列表和无序列表 无序列表使用*、+、-作为标记，作用等同 有序列表使用数字+.来表示 数字的数值并不影响呈现 因为在HTML里最后都是被转为&lt;li&gt;Bird&lt;/li&gt; 可以有两层无序列表 在*前加空格即可 这时列表标识符会变成空心圆 在无需列表中加入有序列表，有序列表自动变为低级列表 在第二层列表之后加如有序列表会变成第三层列表 有序列表没有多层 可以插入代码区块教程中给出的空4格方法不知道为什么没有作用行内代码可以用反引号`进行标注，如代码大段的代码可以用\\代码```表示1234如```javapublic static void main(String [] args) &#123;&#125; 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。 链接和图片插入图片和链接的写法相似：This is [an example](http://example.com/ &quot;Title&quot;) inline link.This is an example inline link.也可以这样：1234I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; I get 10 times more traffic from Google than fromYahoo or MSN. 图片的语法：![Alt text](/path/to/img.jpg &quot;Optional title&quot;)或是：12![Alt text][id][id]: url/to/image &quot;Optional title attribute&quot; MarkDown 粗体和斜体强调用或者_在想要强调的文字两边一个\\或_表示斜体两个*或_表示粗体","tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://yoursite.com/tags/MarkDown/"}]},{"title":"Jenkov Java Tutorials总结","date":"2017-04-19T15:24:33.000Z","path":"2017/04/19/jenkov-java-tutorials/","text":"x.equals(y)，x和y的HashCode必然一样 Java main函数里面的参数名称可以改变 Math.min()中的参数是根据返回值来定的，参数的类型需要能被转成返回值的类型 double Math.power(double, double) int [] ints2 = {1,2,3,4,5,6,7,8,9,10}; Arrays.copyOf(T[]), Arrays.copyOfRange(T[], int start, int end) Arrays.toString()转化为字符串 Arrays.sort() 12345Arrays.sort(T[], new Comparator&lt;T&gt;() &#123; @Override public int compare(T t1, T t2) &#123; return t1.compareTo(t2);&#125; &#125;); Arrays.fill()用来填充数组, Arrays.fill(T[], start, end, value) Arrays.binarySearch(T[], value)对排序好的数据进行二分查找。如果数组内有多个该元素，不能确定返回的是哪一个。如果数组内没有该元素，返回该元素应该在的索引的负值-1。Arrays.binarySearch(T[], atart, end, value)与上述相似。 Arrays.equals()判断两个数组是否完全相等 String内部是以UTF16表示的，每个字符2个byte 尽量用StringBuilder来进行String的拼接 String.equalsIgnoreCase()忽略大小写的相等判断 String.trim()用于去掉字符串前后的空字符 String.split(regex, length)中的length是指划分后返回的字符串数组的最大长度 从java1.7开始，switch()可以是int, byte, char, short, String, enum [access_modifier] [static] [final] type name [= initial value] ; Java字段访问修饰符： private：只有类本身内部的代码可以访问这个字段 package：只有类本身或其他在同一package中的类可以访问，如果不加修饰符默认为package protected：与package类似，除了类的子类也可以访问字段 public：程序中的所有类都可以访问 Java静态字段位于类中，不在类的实例中；非静态字段位于类的实例中 子类不继承父类的构造函数，但需要在某一个构造函数中调用父类的构造函数(super()) source目录不是一个包（package） 类修饰符的优先级大于类中字段、方法的优先级（覆盖） Interface中的方法不能添加protected和private修饰符，默认是public 子类的方法不能减少重写方法的可访问性，只能保留或者扩展，目的是让父类能做的事情，子类也必须能做 可以用instanceof来判断实例是否是某个特定类的实例，boolean b = car instanceof Vehicle，子类是父类的实例，父类不是子类的实例 Java中字段是不能被重写的，子类中如果出现了与父类同名的字段就会覆盖该字段 如果子类调用超类中的方法，并且该方法访问与子类名称相同的字段，那么父类中的字段将被访问 Java内部类也会生成.class文件，匿名内部类也会生成名为Main\\$1.class的文件，接口也会生成class文件，如果类在主类外部定义，名称就是类名.class，如果在主类内部定义就是Main\\$类名.class，接口也有.class文件 子类的构造函数会先调用父类的构造函数，再在父类之后进行其他工作 子类中的方法使用super，如果是构造函数要放在第一行，如果不是构造则不用 嵌套类(nested class)及其封闭类(enclosing class)，有四种类型： Static nested class Non-static nested class Local class Anonymous class 如果静态内部类想要调取外部类的私有对象（内部类已经覆盖了该字段），需用Outer.this.字段 从Java8开始，local class可以访问外部方法的参数，参数需要被声明为final或者有效的final，即从初始化后没有被修改过 本地类实质上是非静态的 嵌套类的好处是可以将属于一起的类组合在一起，更强的组合 抽象类不能被实例化，有抽象方法的一定是抽象类，抽象类也有非抽象方法，抽象方法不能有函数体，如果一个非抽象类继承了抽象类，它需要实现抽象类中的所有抽象方法 接口中的方法不能有实现，实现接口的类需要实现所有方法，可以像类的继承一样声明接口对象，实例化为一个实现了接口的类，MyInterface my = new MyInterfaceClass(); 实现多个接口时可能出现签名一致的情况，由程序员来决定怎么做； 接口中所有的变量都是public； 接口中所有的方法都是public的； 可以使用default标记接口中的方法为默认方法，必须拥有实现； 接口可以继承接口（extends），也可以继承多个接口，签名冲突由程序员解决； 在一个类实现多个接口时，或者一个接口继承多个接口时，如果有签名重复，并且其中至少一个接口的该方法被声明为默认方法，则实现多个接口的类或者实现多重继承接口的类必须给出该签名的显式实现； 接口可以实现多态（Polymorphism） Java5开始包含enum（枚举）； enum是一种特殊的Java类；public enum Level {high, medium, low}； Level l = Level.high;； enum可以放在switch中； 可以用for (Level l : Level.values())遍历枚举类型的所有值，.values()是enum对象的静态函数 Java enum可以有字段，实现如下：12345678910 public enum Level &#123; high(3), medium(2), low(1); private final int code; private Level(int code) &#123; this.code = code; &#125; &#125; Each constant enum value gets these fields. The field values must be suppliedto the constructor of the enum when defining the constants。Enum构造器只能是private或者默认的package。字段可以不是final的，即可以修改，但这种做法不提倡，因为enum应该是常量 Java enum可以有方法，方法可以是public，可以访问enum中的字段；enum不能继承其他类，因为enum是从java.lang.Enum中隐式继承的；enum中的字段和方法必须要在常量列表之后，并且常量列表必须以分号结尾 Java注释（annotation）用于为Java代码提供元数据，作为元数据，annotation不直接影响代码的执行 Java annotation通常用于以下目的 Compiler instructions Build-time instructions Runtime instructions(通过反射访问) Annotation长这样：@Entity，@Entity(table = “vehicle”, key = “id”)，如果只有一个元素可以写value，@Entity(value = “yes”)，value可以省略 注释可以放在类、接口、方法、方法参数、字段和局部变量之上 @Deprecated注释被弃用的类、方法或字段，当调用这些类方法字段时会发出警告；同时要加上原因与替代方法： 12345@Deprecated/** @deprecated Use MyNewComponent instead.*/public class MyComponent &#123;&#125; @Override用于注释重写父类方法的方法，如果该方法与父类中方法不匹配，则编译报错 @SupressWarning注释使编译器抑制对某个方法的警告 创建自己的注释：12345@interface MyAnnotation &#123; String value() default \"\"; int age(); String[] names();&#125; 关键字@interface告诉编译器这是Java注释，注释中的元素只能是原始数据类型和String及他们的数组；使用default来指定元素默认值 @Rention123456import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;@Retention（RetentionPolicy.RUNTIME）@interface MyAnnotation &#123; String value（）default“”;&#125; @Rention注释说明这个注释会保留到哪个阶段，RetentionPolicy.RUNTIME保留到运行时，可以通过反射来获得，.CLASS（默认）存储到.class文件中，.SOURCE仅保存在源代码中 @Target123456import java.lang.annotation.ElementType;import java.lang.annotation.Target;@Target(&#123;ElementType.METHOD&#125;)public @interface MyAnnotation &#123; String value();&#125; @Target注释说明该注释可以作用于哪些目标，包括{ANNOTATION_TYPE,CONSTRUCTOR,FIELD,LOCAL_VARIABLE,METHOD,PACKAGE,PARAMETER,TYPE},其中TYPE指所有类型 @Inherited被@Inherited注释的类被继承时，子类同时也继承了该注释 @Documented表示这个注释应该被JavaDoc记录 Lambda是Java8中新加入的。常常用于匿名内部类的替代，简写，漂亮的简洁的实现。Lambda表达式只能用于单方法接口（功能接口）的实现，如监听器、线程、比较器。Lambda表达式的使用必须满足以下条件：接口只能有一个方法；表达式的参数匹配方法的参数；表达式的返回类型匹配方法的返回类型。Lambda表达式可以自己进行类型推断。写法如下：1234567() -&gt; System.out.println(\"\");(param1, param2, ...) -&gt; &#123; instructions; return ;&#125;param -&gt; param &gt; 0;sort((a, b) -&gt; a.compareTo(b)); Lambda表达式本质上是一个对象，可以复制给一个接口的变量，代表其实现 Graphical overview of the Collection interface hierarchy Graphical overview of the Map interface hierarchy Collection的子类：List, Set, SortedSet, NavagableSet, Queue, Deque方法： 1234567collection.add();collection.addAll();collection.remove();collection.removeAll();collection.retainAll();collection.contains();collection.containsAll(); Set是一个接口，实现有： HashSet：以HashMap实现，不保证顺序 LinkedHashSet：以放入的顺序存储 TreeSet：以元素的顺序存储HashSet可以包含不同类型的对象，TreeSet不行，会在运行时报错：class1 cannot be cast to class2；如果是自行定义的类需要实现Comparable接口，否则报错 Map是一个接口，实现有：java.util.HashMap, Hashtable, EnumMap, IdentityHashMap, LinkedHashMap, Properties, TreeMap, WeakHashMap Deque是双向队列 相同的对象Hash码必然一致，拥有同样Hash码的两个对象不一定相等 多线程的优点 更好地利用资源 在某些情况下程序设计更简单 更加交互式的程序 多线程的代价在考虑使用多线程而不是单线程时需要对性能和响应能力进行衡量，务必使得获得的好处会超过付出的代价。 更复杂的设计 上下文切换开销 资源消耗增加 并发系统可以用不同的并发模型实现，并发模型指定系统的线程如何协同完成作业。并发系统与分布式系统十分相似，两者的设计思想可以互相借鉴，如负载平衡、异常处理操作等。 Parallel Workers进入的作业被委托者（delegator）分配给不同的工作人员：每个工作人员会完成整个工作，工作人员并行进行工作，运行在不同的线程，甚至在不同的CPU上 优势：易于理解，要增加程序的并行化，只需添加更多的员工 缺点：共享状态可以很复杂，工作进行与完成的顺序无法确定 Assembly Line工人像工厂中流水线上的工人一样，每个工人只执行完整工作的一部分，当该部分完成时，作业将被转发到下一个工作人员。每个工作人员都在自己的线程中运行，与其他工作人员不分享任何状态，也被称为shared nothing 并发模式装配线实际上可能更复杂，工作可能有多条流水线，每一名员工也并不是只在一条流水线上 优势：不需要共享状态；工人可以在内存中保留他们需要的数据，可以获得更快的工作速度；更好的硬件一致性 缺点：作业的执行通常会分散给多个工作人员，从而跨越项目中的多个类，更难看出给定作业正在执行哪些代码","tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"Interview","slug":"Interview","permalink":"http://yoursite.com/tags/Interview/"}]},{"title":"interview","date":"2017-04-06T13:46:17.000Z","path":"2017/04/06/interview/","text":"MySQL 添加列，修改列，删除列 ALTER TABLE：添加，修改，删除表的列，约束等表的定义。 查看列：desc 表名;修改表名：alter table t_book rename to bbb;添加列：alter table 表名 add column 列名 varchar(30);删除列：alter table 表名 drop column 列名;修改列名MySQL： alter table bbb change nnnnn hh int;修改列名SQLServer：exec sp_rename’t_student.name’,’nn’,’column’;修改列名Oracle：lter table bbb rename column nnnnn to hh int;修改列属性：alter table t_book modify name varchar(22); windows系统口令配置文件是 c:\\windows\\system32\\config\\SAM选项ABC中的小写boot、password、user是Linux中的文件，大写的D选项SAM是windows下的配置文件SAM(Security Account Manager)安全账号管理器的机制SAM文件即账号密码数据库文件，是windows的用户账户数据库，所有用户的登录名及口令等相关信息都会保存在这个文件中。SAM文件可以认为类似于unix系统中的passwd文件,不过没有unix的passwd文件那么直观，当我们忘记密码的时候，就可以通过删除SAM文件，快速地进入系统。 集线器（物理层）采用的式共享带宽的工作方式， 每个站所能得到的带宽是1Mb/s而交换机（数据链路层）是独享带宽， 每个站所能得到的带宽是10Mb/s。 后缀算式5 3 2+ * 8 2/ -解法：遇到数字就将其压栈，遇到符号就从栈中pop出两个数字运算再压入栈内，最后得到答案 324个元素，分成9块，每块36个元素。查找块平均需要（1+9）/2 =5次, 块内查找元素需要平均（1+36）/2 = 18.5次，共23.5次。已提交纠错。 Struts属于控制层C，负责流程控制，即对模型层M和视图层V的连接，Spring负责业务流转，即中间跑腿的，控制整个框架的管理，Hibernate属于模型层，进行数据库操作的封装 Java中==作用于两个对象表示引用的比较，作用于基本类型表示相等，对象要用。equal ++a increments and then uses the variable.a++ uses and then increments the variable. １,被定义成FINAL的类不能派生子类２,被定义成FINAL的方法不能够被重写 ／／注意！是重写，不是重载３,被声明为FINAL的成员变量一经赋值就不能改变．1.final可以用来修饰类、方法、变量，不能用来抽象类和接口 链接：https://www.nowcoder.com/questionTerminal/27e62c53e79f47b2bc2f2d6590f84f1d?pos=387&amp;orderByHotValue=1来源：牛客网 构造方法是一种特殊的方法，具有以下特点。 （1）构造方法的方法名必须与类名相同。 （2）构造方法没有返回类型，也不能定义为void，在方法名前面不声明方法类型。 （3）构造方法的主要作用是完成对象的初始化工作，它能够把定义对象时的参数传给对象的域。 （4）一个类可以定义多个构造方法，如果在定义类时没有定义构造方法，则编译系统会自动插入一个无参数的默认构造器，这个构造器不执行任何代码。 （5）构造方法可以重载，以参数的个数，类型，顺序。 在创建子类的对象时，Java虚拟机首先执行父类的构造方法，然后再执行子类的构造方法。在多级继承的情况下，将从继承树的最上层的父类开始，依次执行各个类的构造方法，这可以保证子类对象从所有直接或间接父类中继承的实例变量都被正确地初始化。super（）必须写在第一行。 链接：https://www.nowcoder.com/questionTerminal/2732166fc5aa4335ae0a4b2085da041c来源：牛客网 首先： 成员方法又称为实例方法 静态方法又称为类方法 其次： a，静态方法中没有this指针 c，可以通过类名作用域的方式调用Class::fun(); d，太绝对化了，在类中申请一个类对象或者参数传递一个对象或者指针都可以调用; 链接：https://www.nowcoder.com/questionTerminal/e515ae7a18924fe3b6952ae7fbb985bc来源：牛客网 1、因为ping的话 后面跟的是地址，所以要先将域名转换为ip地址，即用到了DNS2、获取到ip地址后，在数据链路层是根据MAC地址传输的，所以要用到ARP解析服务，获取到MAC地址 3、ping功能是测试另一台主机是否可达，程序发送一份ICMP回显请求给目标主机，并等待返回ICMP回显应答，（ICMP主要是用于ip主机、路由器之间传递控制信息，控制信息是指网络通不通，主机是否科大） 4、TCP的话，不涉及数据传输，不会用到 n个人每个人都不站在原来的位置的方法数有:f(n)=n!(1/2!-1/3!+1/4!+..+(-1)^n/n!)此公式的推导过程要用到筛法公式,而且推导过程很复杂,除了竞赛高考肯定不会出现,对于n不大于4时可采用枚举法.一般只需记住n不大于5的情况即可f(2)=1,f(3)=2,f(4)=9,f(5)=44此外还有一个简单的公式f(n)={n!/e},{x}表示最接近x的整数,e为自然底数,其值为2.7182818,一般取2.72即可 StringBuilder线程不安全，StringBuffer线程安全效率差，Object+””创建了三个字符串","tags":[]},{"title":"python itertools的使用","date":"2017-03-14T14:00:22.000Z","path":"2017/03/14/python-itertools/","text":"最开始是遇到一个问题，如何在以1file = open(file_address, 'w') 的方法打开的文件中，跳过第一行读取，因为第一行可能是配置信息，或者csv文件的列头信息，需要跳过读取。经过搜索找到了这样的方法:123import itertoolsfor line in itertools.islice(file, 1, None): pass 测试有效。python中的itertools模块内置一系列的迭代器创建函数，详细：Python：itertools模块python itertools的使用","tags":[{"name":"Q&amp;A","slug":"Q-amp-A","permalink":"http://yoursite.com/tags/Q-amp-A/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Hexo主题yilia","date":"2017-03-14T13:53:55.000Z","path":"2017/03/14/theme-yilia/","text":"Hexo主题yilia喜欢这个主题的原因是头像框是圆形的，配我的头像很好看~（虽然可以改主题的css文件，不过太麻烦了）yilia的缺点，或者说与其他主题不同是它没有catagory，不过用多个tag也可以解决，不算什么大事~","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"JAVA的Random类[转]","date":"2017-03-02T14:41:12.000Z","path":"2017/03/02/java-random/","text":"转自JAVA的Random类[转] 用法 Random对象的生成 12Random r1 = new Random();Random r2 = new Random(10); //参数表述种子数 Random类常用方法 12345public boolean nextBoolean() //生成一个随机的boolean值public double nextDouble() //生成一个[0,1.0)之间的随机double值public int nextInt() //生成一个随机的int值public int nextInt(int n) //生成一个[0,n)之间的随机int值public void setSeed(long seed) //重设种子数 注意 相同种子数的Random对象，相同次数生成的随机数字是完全相同的。","tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"Q&amp;A","slug":"Q-amp-A","permalink":"http://yoursite.com/tags/Q-amp-A/"}]},{"title":"第一篇文章","date":"2017-02-05T14:15:32.000Z","path":"2017/02/05/first/","text":"Hexo + Github Pages搭建教程手把手教你使用Hexo + Github Pages搭建个人独立博客如何搭建一个独立博客——简明Github Pages与Hexo教程一步步在GitHub上创建博客主页","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]